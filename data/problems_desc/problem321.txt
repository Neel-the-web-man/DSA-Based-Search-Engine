You are given an integern, which indicates that there arencourses labeled from1ton. You are also given a 2D integer arrayrelationswhererelations[j] = [prevCoursej, nextCoursej]denotes that courseprevCoursejhas to be completedbeforecoursenextCoursej(prerequisite relationship). Furthermore, you are given a0-indexedinteger arraytimewheretime[i]denotes how manymonthsit takes to complete the(i+1)thcourse.You must find theminimumnumber of months needed to complete all the courses following these rules:You may start taking a course atany timeif the prerequisites are met.Any number of coursescan be taken at thesame time.Returntheminimumnumber of months needed to complete all the courses.Note:The test cases are generated such that it is possible to complete every course (i.e., the graph is a directed acyclic graph).Example 1:Input:n = 3, relations = [[1,3],[2,3]], time = [3,2,5]Output:8Explanation:The figure above represents the given graph and the time required to complete each course. 
We start course 1 and course 2 simultaneously at month 0.
Course 1 takes 3 months and course 2 takes 2 months to complete respectively.
Thus, the earliest time we can start course 3 is at month 3, and the total time required is 3 + 5 = 8 months.Example 2:Input:n = 5, relations = [[1,5],[2,5],[3,5],[3,4],[4,5]], time = [1,2,3,4,5]Output:12Explanation:The figure above represents the given graph and the time required to complete each course.
You can start courses 1, 2, and 3 at month 0.
You can complete them after 1, 2, and 3 months respectively.
Course 4 can be taken only after course 3 is completed, i.e., after 3 months. It is completed after 3 + 4 = 7 months.
Course 5 can be taken only after courses 1, 2, 3, and 4 have been completed, i.e., after max(1,2,3,7) = 7 months.
Thus, the minimum time needed to complete all the courses is 7 + 5 = 12 months.Constraints:1 <= n <= 5 * 1040 <= relations.length <= min(n * (n - 1) / 2, 5 * 104)relations[j].length == 21 <= prevCoursej, nextCoursej<= nprevCoursej!= nextCoursejAll the pairs[prevCoursej, nextCoursej]areunique.time.length == n1 <= time[i] <= 104The given graph is a directed acyclic graph.