You are in a city that consists ofnintersections numbered from0ton - 1withbi-directionalroads between some intersections. The inputs are generated such that you can reach any intersection from any other intersection and that there is at most one road between any two intersections.You are given an integernand a 2D integer arrayroadswhereroads[i] = [ui, vi, timei]means that there is a road between intersectionsuiandvithat takestimeiminutes to travel. You want to know in how many ways you can travel from intersection0to intersectionn - 1in theshortest amount of time.Returnthenumber of waysyou can arrive at your destination in theshortest amount of time. Since the answer may be large, return itmodulo109+ 7.Example 1:Input:n = 7, roads = [[0,6,7],[0,1,2],[1,2,3],[1,3,3],[6,3,3],[3,5,1],[6,5,1],[2,5,1],[0,4,5],[4,6,2]]Output:4Explanation:The shortest amount of time it takes to go from intersection 0 to intersection 6 is 7 minutes.
The four ways to get there in 7 minutes are:
- 0 ➝ 6
- 0 ➝ 4 ➝ 6
- 0 ➝ 1 ➝ 2 ➝ 5 ➝ 6
- 0 ➝ 1 ➝ 3 ➝ 5 ➝ 6Example 2:Input:n = 2, roads = [[1,0,10]]Output:1Explanation:There is only one way to go from intersection 0 to intersection 1, and it takes 10 minutes.Constraints:1 <= n <= 200n - 1 <= roads.length <= n * (n - 1) / 2roads[i].length == 30 <= ui, vi<= n - 11 <= timei<= 109ui!= viThere is at most one road connecting any two intersections.You can reach any intersection from any other intersection.