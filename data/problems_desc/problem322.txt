There is anundirectedgraph withnnodes numbered from0ton - 1(inclusive). You are given a0-indexedinteger arrayvalueswherevalues[i]is thevalueof theithnode. You are also given a0-indexed2D integer arrayedges, where eachedges[j] = [uj, vj, timej]indicates that there is an undirected edge between the nodesujandvj,and it takestimejseconds to travel between the two nodes. Finally, you are given an integermaxTime.Avalidpathin the graph is any path that starts at node0, ends at node0, and takesat mostmaxTimeseconds to complete. You may visit the same node multiple times. Thequalityof a valid path is thesumof the values of theunique nodesvisited in the path (each node's value is addedat most onceto the sum).Returnthemaximumquality of a valid path.Note:There areat most fouredges connected to each node.Example 1:Input:values = [0,32,10,43], edges = [[0,1,10],[1,2,15],[0,3,10]], maxTime = 49Output:75Explanation:One possible path is 0 -> 1 -> 0 -> 3 -> 0. The total time taken is 10 + 10 + 10 + 10 = 40 <= 49.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 0 + 32 + 43 = 75.Example 2:Input:values = [5,10,15,20], edges = [[0,1,10],[1,2,10],[0,3,10]], maxTime = 30Output:25Explanation:One possible path is 0 -> 3 -> 0. The total time taken is 10 + 10 = 20 <= 30.
The nodes visited are 0 and 3, giving a maximal path quality of 5 + 20 = 25.Example 3:Input:values = [1,2,3,4], edges = [[0,1,10],[1,2,11],[2,3,12],[1,3,13]], maxTime = 50Output:7Explanation:One possible path is 0 -> 1 -> 3 -> 1 -> 0. The total time taken is 10 + 13 + 13 + 10 = 46 <= 50.
The nodes visited are 0, 1, and 3, giving a maximal path quality of 1 + 2 + 4 = 7.Constraints:n == values.length1 <= n <= 10000 <= values[i] <= 1080 <= edges.length <= 2000edges[j].length == 30 <= uj< vj<= n - 110 <= timej, maxTime <= 100All the pairs[uj, vj]areunique.There areat most fouredges connected to each node.The graph may not be connected.