You are given two integer arraysnums1andnums2, sorted innon-decreasing order, and two integersmandn, representing the number of elements innums1andnums2respectively.Mergenums1andnums2into a single array sorted innon-decreasing order.The final sorted array should not be returned by the function, but instead bestored inside the arraynums1. To accommodate this,nums1has a length ofm + n, where the firstmelements denote the elements that should be merged, and the lastnelements are set to0and should be ignored.nums2has a length ofn.Example 1:Input:nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3Output:[1,2,2,3,5,6]Explanation:The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.Example 2:Input:nums1 = [1], m = 1, nums2 = [], n = 0Output:[1]Explanation:The arrays we are merging are [1] and [].
The result of the merge is [1].Example 3:Input:nums1 = [0], m = 0, nums2 = [1], n = 1Output:[1]Explanation:The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.Constraints:nums1.length == m + nnums2.length == n0 <= m, n <= 2001 <= m + n <= 200-109<= nums1[i], nums2[j] <= 109Follow up:Can you come up with an algorithm that runs inO(m + n)time?