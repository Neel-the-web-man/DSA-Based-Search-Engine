There arenpeople, each person has a uniqueidbetween0andn-1. Given the arrayswatchedVideosandfriends, wherewatchedVideos[i]andfriends[i]contain the list of watched videos and the list of friends respectively for the person withid = i.Level1of videos are all watched videos by your friends, level2of videos are all watched videos by the friends of your friends and so on. In general, the levelkof videos are all watched videos by people with the shortest pathexactlyequal tokwith you. Given youridand thelevelof videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest.Example 1:Input:watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1Output:["B","C"]Explanation:You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):
Person with id = 1 -> watchedVideos = ["C"] 
Person with id = 2 -> watchedVideos = ["B","C"] 
The frequencies of watchedVideos by your friends are: 
B -> 1 
C -> 2Example 2:Input:watchedVideos = [["A","B"],["C"],["B","C"],["D"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2Output:["D"]Explanation:You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).Constraints:n == watchedVideos.length == friends.length2 <= n <= 1001 <= watchedVideos[i].length <= 1001 <= watchedVideos[i][j].length <= 80 <= friends[i].length < n0 <= friends[i][j] < n0 <= id < n1 <= level < niffriends[i]containsj, thenfriends[j]containsi