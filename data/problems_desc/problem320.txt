A city is represented as abi-directional connectedgraph withnvertices where each vertex is labeled from1ton(inclusive). The edges in the graph are represented as a 2D integer arrayedges, where eachedges[i] = [ui, vi]denotes a bi-directional edge between vertexuiand vertexvi. Every vertex pair is connected byat most oneedge, and no vertex has an edge to itself. The time taken to traverse any edge istimeminutes.Each vertex has a traffic signal which changes its color fromgreentoredand vice versa everychangeminutes. All signals changeat the same time. You can enter a vertex atany time, but can leave a vertexonly when the signal is green. Youcannot waitat a vertex if the signal isgreen.Thesecond minimum valueis defined as the smallest valuestrictly largerthan the minimum value.For example the second minimum value of[2, 3, 4]is3, and the second minimum value of[2, 2, 4]is4.Givenn,edges,time, andchange, returnthesecond minimum timeit will take to go from vertex1to vertexn.Notes:You can go through any vertexanynumber of times,including1andn.You can assume that when the journeystarts, all signals have just turnedgreen.Example 1:Input:n = 5, edges = [[1,2],[1,3],[1,4],[3,4],[4,5]], time = 3, change = 5Output:13Explanation:The figure on the left shows the given graph.
The blue path in the figure on the right is the minimum time path.
The time taken is:
- Start at 1, time elapsed=0
- 1 -> 4: 3 minutes, time elapsed=3
- 4 -> 5: 3 minutes, time elapsed=6
Hence the minimum time needed is 6 minutes.

The red path shows the path to get the second minimum time.
- Start at 1, time elapsed=0
- 1 -> 3: 3 minutes, time elapsed=3
- 3 -> 4: 3 minutes, time elapsed=6
- Wait at 4 for 4 minutes, time elapsed=10
- 4 -> 5: 3 minutes, time elapsed=13
Hence the second minimum time is 13 minutes.Example 2:Input:n = 2, edges = [[1,2]], time = 3, change = 2Output:11Explanation:The minimum time path is 1 -> 2 with time = 3 minutes.
The second minimum time path is 1 -> 2 -> 1 -> 2 with time = 11 minutes.Constraints:2 <= n <= 104n - 1 <= edges.length <= min(2 * 104, n * (n - 1) / 2)edges[i].length == 21 <= ui, vi<= nui!= viThere are no duplicate edges.Each vertex can be reached directly or indirectly from every other vertex.1 <= time, change <= 103