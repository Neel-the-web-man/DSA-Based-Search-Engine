You are given two integer arrayspersonsandtimes. In an election, theithvote was cast forpersons[i]at timetimes[i].For each query at a timet, find the person that was leading the election at timet. Votes cast at timetwill count towards our query. In the case of a tie, the most recent vote (among tied candidates) wins.Implement theTopVotedCandidateclass:TopVotedCandidate(int[] persons, int[] times)Initializes the object with thepersonsandtimesarrays.int q(int t)Returns the number of the person that was leading the election at timetaccording to the mentioned rules.Example 1:Input["TopVotedCandidate", "q", "q", "q", "q", "q", "q"]
[[[0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]], [3], [12], [25], [15], [24], [8]]Output[null, 0, 1, 1, 0, 0, 1]ExplanationTopVotedCandidate topVotedCandidate = new TopVotedCandidate([0, 1, 1, 0, 0, 1, 0], [0, 5, 10, 15, 20, 25, 30]);
topVotedCandidate.q(3); // return 0, At time 3, the votes are [0], and 0 is leading.
topVotedCandidate.q(12); // return 1, At time 12, the votes are [0,1,1], and 1 is leading.
topVotedCandidate.q(25); // return 1, At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
topVotedCandidate.q(15); // return 0
topVotedCandidate.q(24); // return 0
topVotedCandidate.q(8); // return 1Constraints:1 <= persons.length <= 5000times.length == persons.length0 <= persons[i] < persons.length0 <= times[i] <= 109timesis sorted in a strictly increasing order.times[0] <= t <= 109At most104calls will be made toq.