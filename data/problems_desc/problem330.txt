You are given an integerndenoting the number of nodes of aweighted directedgraph. The nodes are numbered from0ton - 1.You are also given a 2D integer arrayedgeswhereedges[i] = [fromi, toi, weighti]denotes that there exists adirectededge fromfromitotoiwith weightweighti.Lastly, you are given threedistinctintegerssrc1,src2, anddestdenoting three distinct nodes of the graph.Returntheminimum weightof a subgraph of the graph such that it ispossibleto reachdestfrom bothsrc1andsrc2via a set of edges of this subgraph. In case such a subgraph does not exist, return-1.Asubgraphis a graph whose vertices and edges are subsets of the original graph. Theweightof a subgraph is the sum of weights of its constituent edges.Example 1:Input:n = 6, edges = [[0,2,2],[0,5,6],[1,0,3],[1,4,5],[2,1,1],[2,3,3],[2,3,4],[3,4,2],[4,5,1]], src1 = 0, src2 = 1, dest = 5Output:9Explanation:The above figure represents the input graph.
The blue edges represent one of the subgraphs that yield the optimal answer.
Note that the subgraph [[1,0,3],[0,5,6]] also yields the optimal answer. It is not possible to get a subgraph with less weight satisfying all the constraints.Example 2:Input:n = 3, edges = [[0,1,1],[2,1,1]], src1 = 0, src2 = 1, dest = 2Output:-1Explanation:The above figure represents the input graph.
It can be seen that there does not exist any path from node 1 to node 2, hence there are no subgraphs satisfying all the constraints.Constraints:3 <= n <= 1050 <= edges.length <= 105edges[i].length == 30 <= fromi, toi, src1, src2, dest <= n - 1fromi!= toisrc1,src2, anddestare pairwise distinct.1 <= weight[i] <= 105