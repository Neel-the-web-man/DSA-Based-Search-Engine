Given a directed acyclic graph (DAG) ofnnodes labeled from0ton - 1, find all possible paths from node0to noden - 1and return them inany order.The graph is given as follows:graph[i]is a list of all nodes you can visit from nodei(i.e., there is a directed edge from nodeito nodegraph[i][j]).Example 1:Input:graph = [[1,2],[3],[3],[]]Output:[[0,1,3],[0,2,3]]Explanation:There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.Example 2:Input:graph = [[4,3,1],[3,2,4],[3],[4],[]]Output:[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]Constraints:n == graph.length2 <= n <= 150 <= graph[i][j] < ngraph[i][j] != i(i.e., there will be no self-loops).All the elements ofgraph[i]areunique.The input graph isguaranteedto be aDAG.